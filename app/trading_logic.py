# trading_logic.py

import asyncio
import logging
import math
import traceback
import time
from app.shared import bot_state_manager, get_user_context
from telegram import Update
import ccxt

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏ start_trading

async def start_trading(symbol: str, update: Update) -> None:
    user_id = update.effective_user.id
    logger.info(f"========== –ù–ê–ß–ê–õ–û –ê–í–¢–û–¢–û–†–ì–û–í–õ–ò ==========")
    logger.info(f"–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–∏–º–≤–æ–ª {symbol}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    await update.message.reply_text(f"üîÑ –ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é –¥–ª—è {symbol}...")

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ —Ç–æ—Ä–≥–æ–≤–ª—è
    if bot_state_manager.is_trading_active(user_id):
        logger.warning(f"–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
        logger.info(f"–°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏")
        bot_state_manager.stop(user_id)
        await update.message.reply_text('–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏ –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞.')

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_context = get_user_context(user_id)
        logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        await update.message.reply_text(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        return

    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞
    bot_state_manager.start(user_id)
    logger.info(f"–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await update.message.reply_text('‚úÖ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop.')

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
    logger.info(f"- –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏: {user_context.bot_params.profit_percentage}%")
    logger.info(f"- –ü—Ä–æ—Ü–µ–Ω—Ç –ø–∞–¥–µ–Ω–∏—è: {user_context.bot_params.fall_percentage}%")
    logger.info(f"- –ó–∞–¥–µ—Ä–∂–∫–∞: {user_context.bot_params.delay_seconds} —Å–µ–∫")
    logger.info(f"- –†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞: {user_context.bot_params.order_size} USDT")

    await update.message.reply_text(
        f"üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        f"- –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏: {user_context.bot_params.profit_percentage}%\n"
        f"- –ü—Ä–æ—Ü–µ–Ω—Ç –ø–∞–¥–µ–Ω–∏—è: {user_context.bot_params.fall_percentage}%\n"
        f"- –ó–∞–¥–µ—Ä–∂–∫–∞: {user_context.bot_params.delay_seconds} —Å–µ–∫\n"
        f"- –†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞: {user_context.bot_params.order_size} USDT"
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MEXC –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ MEXC –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await update.message.reply_text("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MEXC...")

        try:
            mexc_instance = user_context.get_mexc_instance()
            logger.info(f"–≠–∫–∑–µ–º–ø–ª—è—Ä MEXC —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            await update.message.reply_text("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MEXC —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ MEXC: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MEXC: {str(e)}")
            bot_state_manager.stop(user_id)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...")

        try:
            balance = mexc_instance.fetch_balance()
            usdt_balance = balance.get('USDT', {}).get('free', 0)
            logger.info(f"–ë–∞–ª–∞–Ω—Å USDT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {usdt_balance}")
            await update.message.reply_text(f"üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {usdt_balance} USDT")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
            if usdt_balance < user_context.bot_params.order_size:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. "
                               f"–ë–∞–ª–∞–Ω—Å: {usdt_balance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {user_context.bot_params.order_size}")
                await update.message.reply_text(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ: {usdt_balance} USDT\n"
                    f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {user_context.bot_params.order_size} USDT"
                )
                bot_state_manager.stop(user_id)
                return

            await update.message.reply_text("‚úÖ –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
            bot_state_manager.stop(user_id)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã {symbol}")
        await update.message.reply_text(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ {symbol}...")

        try:
            mexc_instance.load_markets()
            if symbol not in mexc_instance.markets:
                logger.error(f"–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ")
                await update.message.reply_text(f"‚ùå –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ MEXC")
                bot_state_manager.stop(user_id)
                return

            logger.info(f"–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ {symbol} –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
            await update.message.reply_text(f"‚úÖ –ü–∞—Ä–∞ {symbol} –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ {symbol}: {str(e)}")
            bot_state_manager.stop(user_id)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}")
        await update.message.reply_text(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã {symbol}...")

        try:
            ticker = mexc_instance.fetch_ticker(symbol)
            current_price = ticker['last']
            logger.info(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: {current_price}")
            await update.message.reply_text(f"üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: {current_price}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {symbol}: {str(e)}")
            bot_state_manager.stop(user_id)
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ–∫—É–ø–∫–µ
        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É")
        await update.message.reply_text("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ–∫—É–ø–∫–µ...")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
        user_context.bot_params.buy_price = current_price
        logger.info(f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {user_context.bot_params.buy_price}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
        cost = user_context.bot_params.order_size
        logger.info(f"–†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞: {cost} USDT")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö
        try:
            market = mexc_instance.markets[symbol]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ –æ—Ä–¥–µ—Ä–∞
            min_cost = None
            if 'limits' in market and 'cost' in market['limits'] and 'min' in market['limits']['cost']:
                min_cost = float(market['limits']['cost']['min'])
                logger.info(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞: {min_cost} USDT")

            min_amount = None
            if 'limits' in market and 'amount' in market['limits'] and 'min' in market['limits']['amount']:
                min_amount = float(market['limits']['amount']['min'])
                logger.info(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {min_amount}")

            # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç
            amount = cost / current_price
            logger.info(f"–†–∞—Å—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {amount}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
            if min_amount is not None and amount < min_amount:
                logger.warning(f"–†–∞—Å—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ({amount}) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ({min_amount}). –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º.")
                amount = min_amount
                cost = amount * current_price
                logger.info(f"–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost} USDT")
                await update.message.reply_text(
                    f"‚ö†Ô∏è –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ.\n"
                    f"–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–∫–∞–∑ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: {amount} {symbol.split('/')[0]} (‚âà{cost} USDT)"
                )

            precision = 8  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if 'precision' in market and 'amount' in market['precision']:
                prec_value = market['precision']['amount']
                logger.info(f"–ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ precision –¥–ª—è amount: {prec_value} (—Ç–∏–ø: {type(prec_value).__name__})")

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º precision –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                if isinstance(prec_value, float):
                    # –ï—Å–ª–∏ precision - –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 1 (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.01),
                    # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
                    if prec_value < 1:
                        precision = abs(int(math.log10(prec_value)))
                    else:
                        precision = int(prec_value)
                elif prec_value is not None:
                    try:
                        precision = int(prec_value)
                    except (ValueError, TypeError):
                        logger.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å precision –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: {prec_value}")
                        precision = 8  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            logger.info(f"–ò—Ç–æ–≥–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {precision}")
            amount = round(amount, precision)

            await update.message.reply_text(
                f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞:\n"
                f"- –°–∏–º–≤–æ–ª: {symbol}\n"
                f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}\n"
                f"- –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞: {current_price}\n"
                f"- –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚âà{cost} USDT"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ä–¥–µ—Ä–∞: {str(e)}")
            bot_state_manager.stop(user_id)
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É {amount} {symbol.split('/')[0]}")
        await update.message.reply_text("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É...")

        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–∫—É–ø–∫—É –º–µ—Ç–æ–¥–æ–º 1: –£–∫–∞–∑–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–µ—Ç–æ–¥–æ–º 1 (—É–∫–∞–∑–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)...")
                buy_order = mexc_instance.create_market_buy_order(symbol, amount)
                logger.info(f"–û—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω (–º–µ—Ç–æ–¥ 1): {buy_order}")

                await update.message.reply_text(
                    f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                    f"- –°–∏–º–≤–æ–ª: {symbol}\n"
                    f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}\n"
                    f"- –¶–µ–Ω–∞: ‚âà{current_price}\n"
                    f"- –°—Ç–æ–∏–º–æ—Å—Ç—å: ‚âà{cost} USDT"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –º–µ—Ç–æ–¥–æ–º 1: {e}")
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–µ—Ç–æ–¥–æ–º 2 (quoteOrderQty)...")

                # –ü—Ä–æ–±—É–µ–º –ø–æ–∫—É–ø–∫—É –º–µ—Ç–æ–¥–æ–º 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ quoteOrderQty
                params = {'quoteOrderQty': cost}
                buy_order = mexc_instance.create_market_buy_order(symbol, None, None, params)
                logger.info(f"–û—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω (–º–µ—Ç–æ–¥ 2): {buy_order}")

                await update.message.reply_text(
                    f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (–º–µ—Ç–æ–¥ 2)!\n"
                    f"- –°–∏–º–≤–æ–ª: {symbol}\n"
                    f"- –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} USDT"
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
            user_context.current_level += 1
            user_context.buy_executed[symbol] = True

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
            actual_amount = buy_order.get('amount', amount)
            logger.info(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç: {actual_amount}")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
            sell_price = current_price * (1 + user_context.bot_params.profit_percentage / 100)
            logger.info(f"–†–∞—Å—á–µ—Ç–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {sell_price}")

            # –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ —Å —É—á–µ—Ç–æ–º —Ç–æ—á–Ω–æ—Å—Ç–∏
            # –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ —Å —É—á–µ—Ç–æ–º —Ç–æ—á–Ω–æ—Å—Ç–∏
            price_precision = 8  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if 'precision' in market and 'price' in market['precision']:
                prec_value = market['precision']['price']
                logger.info(f"–ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ precision –¥–ª—è price: {prec_value} (—Ç–∏–ø: {type(prec_value).__name__})")

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º precision –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                if isinstance(prec_value, float):
                    # –ï—Å–ª–∏ precision - –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 1 (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.01),
                    # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
                    if prec_value < 1:
                        price_precision = abs(int(math.log10(prec_value)))
                    else:
                        price_precision = int(prec_value)
                elif prec_value is not None:
                    try:
                        price_precision = int(prec_value)
                    except (ValueError, TypeError):
                        logger.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å price_precision –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: {prec_value}")
                        price_precision = 8  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            logger.info(f"–ò—Ç–æ–≥–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —Ü–µ–Ω—ã: {price_precision}")
            sell_price = round(sell_price, price_precision)

            # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
            logger.info(
                f"–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {actual_amount} {symbol.split('/')[0]} –ø–æ —Ü–µ–Ω–µ {sell_price}")
            await update.message.reply_text(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ —Ü–µ–Ω–µ {sell_price}...")

            try:
                sell_order = mexc_instance.create_limit_sell_order(symbol, actual_amount, sell_price)
                logger.info(f"–û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {sell_order}")

                await update.message.reply_text(
                    f"‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n"
                    f"- –°–∏–º–≤–æ–ª: {symbol}\n"
                    f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {actual_amount}\n"
                    f"- –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {sell_price}\n"
                    f"- –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {user_context.bot_params.profit_percentage}%"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {e}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {str(e)}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç.–∫. –º–æ–Ω–µ—Ç—ã —É–∂–µ –∫—É–ø–ª–µ–Ω—ã, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ–¥–∞—Ç—å –∏—Ö –≤—Ä—É—á–Ω—É—é

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏
            logger.info(f"–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await update.message.reply_text(
                "‚úÖ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –≤—ã–ø–æ–ª–Ω–∏–ª–∞ –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏.\n"
                "–û–∂–∏–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É..."
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É: {e}")
            logger.error(traceback.format_exc())  # –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É: {str(e)}")
            bot_state_manager.stop(user_id)
            return

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        iteration = 0
        while bot_state_manager.is_trading_active(user_id):
            iteration += 1
            logger.info(f"–ò—Ç–µ—Ä–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è #{iteration} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            if iteration % 3 == 0:  # –ö–∞–∂–¥—ã–µ ~30 —Å–µ–∫—É–Ω–¥ (10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏)
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                    open_orders = mexc_instance.fetch_open_orders(symbol)
                    num_open_orders = len(open_orders)
                    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {num_open_orders}")

                    if num_open_orders > 0:
                        logger.info(f"–û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –≤—Å–µ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç. –û–∂–∏–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.")
                    else:
                        logger.info(f"–í—Å–µ –æ—Ä–¥–µ—Ä—ã –∏—Å–ø–æ–ª–Ω–µ–Ω—ã! –¶–∏–∫–ª –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.")
                        await update.message.reply_text(
                            "üéâ –í—Å–µ –æ—Ä–¥–µ—Ä—ã –∏—Å–ø–æ–ª–Ω–µ–Ω—ã! –¶–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ."
                        )
                        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–¥–µ—Å—å
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–æ–≤: {e}")

            # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            await asyncio.sleep(10)

        logger.info(f"–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await update.message.reply_text("‚èπÔ∏è –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–µ: {e}")
        logger.error(traceback.format_exc())  # –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å
        await update.message.reply_text(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        bot_state_manager.stop(user_id)
        logger.info(f"========== –ö–û–ù–ï–¶ –ê–í–¢–û–¢–û–†–ì–û–í–õ–ò ==========")